# -*- coding: utf-8 -*-
"""Heart_Disease_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19YKMa6kJ458wr5UzpgxbP0nkeTjq99Em
"""

import numpy as np
import pandas as pd
import tensorboard as tf
from matplotlib import pyplot as plt
import seaborn as sns

df = pd.read_excel('HeartDisease.xlsx')

df.head()

df.shape

df.describe()

df.columns

# Replace the list of column names with the columns
columns = ['HeartDisease','Smoking', 'AlcoholDrinking', 'Stroke', 'DiffWalking', 'Sex',
           'AgeCategory', 'Race', 'Diabetic', 'PhysicalActivity', 'GenHealth',
           'Asthma', 'KidneyDisease', 'SkinCancer']

# Loop through the list of columns and display the value counts for each one
for column in columns:
    counts = df[column].value_counts()
    print(column + ':')
    print(counts)
    print()

heart_disease_counts = df['HeartDisease'].value_counts()

# Plot the counts as a bar chart
heart_disease_counts.plot.bar()

# Add axis labels and title
plt.xlabel('Heart Disease')
plt.ylabel('Count')
plt.title('Heart Disease Counts')

# Display the plot
plt.show()

# Replace 'SkinCancer' with the column you want to plot
Age_Category = df['AgeCategory'].value_counts()

# Plot the counts as a bar chart
Age_Category.plot.bar()

# Add axis labels and title
plt.xlabel('Age ')
plt.ylabel('Count')
plt.title('Age Category')

# Display the plot
plt.show()

race_counts = df['Race'].value_counts()

# Plot the counts as a bar chart
race_counts.plot.bar()

# Add axis labels and title
plt.xlabel('Race')
plt.ylabel('Count')
plt.title('Race Counts')

# Display the plot
plt.show()

diabetic_counts = df['Diabetic'].value_counts()

# Plot the counts as a bar chart
diabetic_counts.plot.bar()

# Add axis labels and title
plt.xlabel('Diabetic')
plt.ylabel('Count')
plt.title('Diabetic Counts')

# Display the plot
plt.show()

genhealth_counts = df['GenHealth'].value_counts()

# Plot the counts as a bar chart
genhealth_counts.plot.bar()

# Add axis labels and title
plt.xlabel('General Health')
plt.ylabel('Count')
plt.title('General Health Counts')

# Display the plot
plt.show()

skin_cancer_counts = df['SkinCancer'].value_counts()

# Plot the counts as a bar chart
skin_cancer_counts.plot.bar()

# Add axis labels and title
plt.xlabel('Skin Cancer')
plt.ylabel('Count')
plt.title('Skin Cancer Counts')

# Display the plot
plt.show()

# Define a dictionary to map 'Yes' and 'No' values to 1 and 0
mapping = {'Male': 1, 'Female': 0}


df['Sex'] = df['Sex'].map(mapping)

# Display the updated dataframe
print(df.head())

# Define a dictionary to map 'Yes' and 'No' values to 1 and 0
mapping = {'Yes': 1, 'No': 0}

# Apply mapping to all columns with 'Yes' and 'No' values
cols_to_map = ['HeartDisease', 'Smoking', 'AlcoholDrinking', 'Stroke', 'DiffWalking', 'PhysicalActivity', 'Asthma', 'KidneyDisease', 'SkinCancer']
for col in cols_to_map:
    df[col] = df[col].map(mapping)

# Display the updated dataframe
print(df.head())

# Define a function to calculate the midpoint of an age range
def calculate_midpoint(age_range):
    if age_range == '80 or older':
        return 85
    age_range = age_range.split('-')
    return (int(age_range[0]) + int(age_range[1])) / 2

# Create a new column with the midpoint of each age range
df['Age'] = df['AgeCategory'].apply(calculate_midpoint)

# Display the updated dataframe
print(df.head())

# Drop the 'AgeCategory' column
df = df.drop('AgeCategory', axis=1)

# Define dictionaries to map categorical values to numerical values
genhealth_mapping = {'Very good': 0, 'Good': 1, 'Excellent': 2, 'Fair': 3, 'Poor': 4}
diabetic_mapping = {'No': 0, 'Yes': 1, 'No, borderline diabetes': 2, 'Yes (during pregnancy)': 3}
race_mapping = {'White': 0, 'Hispanic': 1, 'Black': 2, 'Other': 3, 'Asian': 4, 'American Indian/Alaskan Native': 5}

# Apply mapping to 'GenHealth', 'Diabetic', and 'Race' columns
df['GenHealth'] = df['GenHealth'].map(genhealth_mapping)
df['Diabetic'] = df['Diabetic'].map(diabetic_mapping)
df['Race'] = df['Race'].map(race_mapping)

print(df.head())

from sklearn.model_selection import train_test_split

# Separate the target column
y = df['HeartDisease'].values

# Drop the target column from the input features
X = df.drop('HeartDisease', axis=1).values

# Split the data into train and test sets with 75:25 ratio
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

# Split the train set further into train and validation sets with 75:25 ratio
X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.25, random_state=42)

# Print the shapes of the resulting sets
print("Train set shape:", X_train.shape, y_train.shape)
print("Validation set shape:", X_val.shape, y_val.shape)
print("Test set shape:", X_test.shape, y_test.shape)

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
X_val_scaled = scaler.transform(X_val)

print('X_train_scaled.shape =', X_train_scaled.shape)

from tensorflow.keras.preprocessing.sequence import TimeseriesGenerator

n_input = 12  # number of time steps
n_features = X_train_scaled.shape[1]  # number of features

train_generator = TimeseriesGenerator(X_train_scaled, y_train, length=n_input, batch_size=16)
test_generator = TimeseriesGenerator(X_test_scaled, y_test, length=n_input, batch_size=16)
val_generator = TimeseriesGenerator(X_val_scaled, y_val, length=n_input, batch_size=16)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv1D, MaxPooling1D, Flatten, Dense, LSTM, Dropout

model = Sequential()
model.add(Conv1D(64, kernel_size=3, activation='relu', input_shape=(n_input, n_features)))
model.add(MaxPooling1D(pool_size=2))
model.add(LSTM(256, activation='relu', return_sequences=True))
model.add(Dropout(0.1))
model.add(LSTM(128, activation='relu'))
model.add(Dropout(0.1))
model.add(Dense(64, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.summary()

from tensorflow.keras.optimizers import Adam
# Compile the model
opt = Adam(learning_rate=0.0001)
model.compile(loss='BinaryCrossentropy', optimizer=opt, metrics=['accuracy'])

from tensorflow.keras.callbacks import EarlyStopping

early_stopping = EarlyStopping(monitor='val_loss', patience=10)

hist = model.fit(train_generator, validation_data=val_generator, epochs=15, verbose=1, callbacks=[early_stopping])

hist.history

fig = plt.figure()
plt.plot(hist.history['loss'], color='blue', label='loss')
plt.plot(hist.history['val_loss'], color='green', label='val_loss')
fig.suptitle('LOSS OF TRAIN AND VAL', fontsize=30)
plt.legend(loc="upper left")
plt.show()

fig = plt.figure()
plt.plot(hist.history['accuracy'], color='blue', label='accuracy')
plt.plot(hist.history['val_accuracy'], color='green', label='val_accuracy')
fig.suptitle('ACCURACY OF TRAIN AND VAL', fontsize=30)
plt.legend(loc="upper left")
plt.show()

test_loss = hist.history['val_loss'][-1]
test_acc = hist.history['val_accuracy'][-1]

print("Test Loss:", test_loss)
print("Test Accuracy:", test_acc)

model.save('heart_disease_model.h5')

import gradio as gr

# Define the prediction function
def predict(age, sex, genhealth, diabetic, race, Smoking, AlcoholDrinking, Stroke, DiffWalking, PhysicalActivity, Asthma, KidneyDisease, SkinCancer, SleepTime, BMI, PhysicalHealth, MentalHealth):
    inputs = preprocess_input(age, sex, genhealth, diabetic, race , Smoking, AlcoholDrinking, Stroke, DiffWalking, PhysicalActivity, Asthma, KidneyDisease, SkinCancer, SleepTime, BMI, PhysicalHealth, MentalHealth)
    prediction = model.predict(inputs)[0][0]
    if prediction < 0.5:
        return 'No risk of diabetes'
    else:
        return 'Risk of diabetes'

# Define the input fields
inputs = [    gr.inputs.Dropdown(label='Age Category', choices=['18-24', '25-29', '30-34', '35-39', '40-44', '45-49', '50-54', '55-59', '60-64', '65-69', '70-74', '75-79', '80 or older']),
    gr.inputs.Radio(label='Sex', choices=[('Male', 'Male'), ('Female', 'Female')]),
    gr.inputs.Dropdown(label='General Health', choices=['Very good', 'Good', 'Excellent', 'Fair', 'Poor']),
    gr.inputs.Dropdown(label='Diabetic', choices=['No', 'Yes', 'No, borderline diabetes', 'Yes (during pregnancy)']),
    gr.inputs.Dropdown(label='Race', choices=['White', 'African American', 'Asian', 'Hispanic', 'Other']),
    gr.inputs.Radio(label='Smoking', choices=[('Yes', 1), ('No', 0)]),
    gr.inputs.Radio(label='Alcohol Drinking', choices=[('Yes', 1), ('No', 0)]),
    gr.inputs.Radio(label='Stroke', choices=[('Yes', 1), ('No', 0)]),
    gr.inputs.Radio(label='Difficulty Walking', choices=[('Yes', 1), ('No', 0)]),
    gr.inputs.Radio(label='Physical Activity', choices=[('Yes', 1), ('No', 0)]),
    gr.inputs.Radio(label='Asthma', choices=[('Yes', 1), ('No', 0)]),
    gr.inputs.Radio(label='Kidney Disease', choices=[('Yes', 1), ('No', 0)]),
    gr.inputs.Radio(label='Skin Cancer', choices=[('Yes', 1), ('No', 0)]),
    gr.inputs.Number(label='Sleep Time (hours)', default=7, min=1, max=24),
    gr.inputs.Number(label='BMI (Body Mass Index)', default=25, min=10, max=50),
    gr.inputs.Number(label='Physical Health (1-30)', default=15, min=1, max=30),
    gr.inputs.Number(label='Mental Health (1-30)', default=15, min=1, max=30)
]

# Create the interface
interface = gr.Interface(
    fn=predict,
    inputs=inputs,
    outputs='text',
    title='Diabetes Risk Predictor',
    description='Enter your information to see if you are at risk of developing diabetes.'
)

# Launch the interface
interface.launch()